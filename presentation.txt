                                  presentation
                                  ============

Author: Ben Kolera <ben@Bens-MacBook-Pro.local>
Date: 2012-05-24 21:21:17 EST


Table of Contents
=================
1 Meta Stuff 
    1.1 Goal for the talk 
    1.2 Not covering in any depth 
2 Talk 
    2.1 Introductory Stuff 
    2.2 Simple Yesod 
    2.3 To the scaffold and beyond! 
3 Conclusions 
    3.1 Problems with yesod 
    3.2 Awesome things about yesod 
4 Further Reading 
5 References 


1 Meta Stuff 
~~~~~~~~~~~~~

1.1 Goal for the talk 
======================
  + To help people see that types can be our friend in web apps without being cumbersome and noisy 
  + To show that TDD doesn't suck when you only have to test your program logic and not have to write mind numbing type tests that a compiler could do. 
  + In essense, we're here to completely debunk the myth that coding in a type safe, compiled language makes you less agile. It actually increases agility. 
  + To show off cool things about yesod: 
    Routing 
    
    Templating languages
    
    Widgets + Forms ( composable HTML pages; very cool )
    
    Persistent (acknowledge that it is there but really just skip over it)
    
    The typesafety ( which gives refactoring confidence and also protection against XSS and SQL injection ) is all of the above things.
    
    RESTfulness 

1.2 Not covering in any depth 
==============================
  + Sites ( wont talk about except mentioning the static subsite ). 
  + Session handling ( will demonstrate sessions but not in a big way ) 

2 Talk 
~~~~~~~

2.1 Introductory Stuff 
=======================
* Web development: the problems we face 
  Crap in, but need magic out. Untrustworthy, inconsistent and downright malicious data from both your users and the database that we have to reason about and display to the user. (Boundary problem)
  
  Very simple problems; there are just a lot of them. Complexity comes from the mess of conflicting, overlapping and inconsistencies of the business requirements. Need to program in a concise way that doesn't add any more noise to our mess. Also need to be able to make small composable elements to so we don't have to repeat ourselves on every page.
  
  Requirements are in constant change. Need to be confident that are changes are correct without manual testing. Agility is paramount to pretty much everything.
  
  Second most and almost equally important problem is performance. No one likes waiting for a slow system and with a public website slow can mean lost customers.
* What is yesod 
  Pronounced yeh-soad; means foundation in hebrew [1].
  
  Started as a haskell web handling and routing library created by Michael Snoyman.
  
  Is now a fully functional set of libraries that help you build webapps that has all the standard bells and whistles with a haskell twist..
  
  Project is quite mature. Hit version 1.0 after 3 years, 80 packages, dozens of contributors & 1000s of commits [2].
* Why Haskell for web development? 
  Very powerful type system that can help prevent silly mistakes.
  
  Expressive functional language that leads to concise & composable code.
  
  Haskell can be very fast thanks to GHC and there are lots of clever, performant libraries for different tasks.
  
  Laziness can be harnessed to create very declarative code without sacrificing performance or code clarity.
  
* Why yesod? 
  + Embraces the type safety to help prevent silly mistakes and help ensure that data is sanitised when needed. 
    Routing , Templating Languages, Forms & Persistent all work in harmony for this.
    
  + Heavily utilizes haskell metaprogramming to reduce boilerplate code that can make type safe programming cumbersome. 
    
  + Follows the haskell mindset that you should be able to build little small reusable bits ( form elements, web pages, db queries ) and compose them together into larger parts. 
    
  + Because it is a set of libraries, not a framework it stays out of your way and can be as simple or as complicated as you like. 
    
    Has a scaffold project as a suggestion for layout but doesn't require any prescribed project format. 
    
  + By building on top of some really cool haskell libraries ( conduits, warp, blaze-html ) yesod is amazingly performant. 
    
  + Is a web framework where there is no longer a tradeoff between agility, performance and code safety. 
    

2.2 Simple Yesod 
=================
* Hello world Single file, single route web app. 
  
  + Shows how simple yesod can be unlike the scaffolding which can be a bit scary. 
  + Talk about the slightly odd pragmas in there: 
    Overloaded strings
    
    Quasiquotes ( By showing the QQ expansion of parseRoutes and whamlet )
    
    Template Haskell ( by showing the output of mkYesod )
    
    Type Families ( by showing the data definition nested inside of our instance of render route ).
    
* Expand hello world to further show the basics without introducing the complication of the scaffold: 
  Page wrapper & some CSS
  
  A POST method, plus a GET with a route token in there. 
  
  A form.

2.3 To the scaffold and beyond! 
================================
* Quick tour of a yesod init and the scaffolding: 
  + Create blank project with yesod init. 
  + Where to find stuff in the scaffolding: 
    Foundation.hs and an explanation of the important bits.
    
    Templates 
    
    Route Config
    
    Model Config
    
    Default place for handlers ( though explaning that where they go doesn't matter; they are just functions ).
    
  + Difference between using in file QQ ( for routes & templates ) and external files. 
* Big Application to show: 
  A bit more about the handler monad ( persistent queries, redirects, etc )
  
  Show off type safe routes and how they really help when refactoring routes.
  
  Protection against XSS attacks. 
  
  Widgets and Composable form elements.
  
  Testing
  
  Example ( that is very loosely explained ) of doing a web appy thing ( shopping cart or something ) to show that we can do real things. 

3 Conclusions 
~~~~~~~~~~~~~~

3.1 Problems with yesod 
========================
* A good portion of code that you write seems to fall inside the handler monad, which is inside IO. This is convenient, but it seems a bit contrary to what we strive to in haskell. 
* Building it can be a real nightmare! 
  Lots of cabal deps which can sometimes get in a tangle with other dependencies that you bring in. 
  
  This is a haskell/cabal ( not yesod ) problem since cabal has min and max version dependencies and neat way to resolve the conflicts.
  
  The meta package yesod-platform and using cabal-dev to isolate your projects fixes this somewhat.
  
* Uses some fairly fancy haskell, so the learning curve is initially very steep to haskell novices. 
* Type errors can be a bit unfriendly ( you know something is broken, but not precisely what ). 
* Type safety limits small-scale experimentation since you can't just test one page if your code doesn't compile: 
  GHC 7.6 should help this by being able to treat compile errors as warnings and get runtime errors instead. [3]
* Type errors force you to load yesod into your brain as you need to know a bit about yesod to figure out what is wrong. 

3.2 Awesome things about yesod 
===============================
Very composable. 

Type safety helps us from doing stupid things. 

Suprisingly low boilerplate.

Is in haskell! 

4 Further Reading 
~~~~~~~~~~~~~~~~~~
* Yesod Website [http://www.yesodweb.com/] 
  Getting Started Guide
  
  Awesome screencasts
  
  Wiki 
* Book 
  [O'Reilly]
  
  [HTML Version of the book]
  

  [O'Reilly]: http://shop.oreilly.com/product/0636920023142.do
  [HTML Version of the book]: http://www.yesodweb.com/book/

5 References 
~~~~~~~~~~~~~
1 [http://www.forvo.com/word/yesod/]

2 [http://www.yesodweb.com/blog/2012/04/announcing-yesod-1-0]

3 [http://hackage.haskell.org/trac/ghc/wiki/Status/May12]


